name: Terraform Deployment
on:
  push:
    branches: 
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          terraform_version: 1.5.7

      - name: Configure AWS Credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Testing AWS Credential
        run: aws sts get-caller-identity
      
      ############################################

      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v2
      - run: |
            tflint --init
            tflint
      

      - name: Initiliazing Terraform
        run: |
          terraform init -input=false
          terraform version
          terraform providers

      - name: Validating Terraform Code
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Upload tfplan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ./tfplan

      - name: Apply infrastructure Code
        run: | 
            terraform apply --auto-approve
            BUCKET_NAME=$(terraform output -raw bucket_name)
            echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
            echo "Extracted_bucket_name: $BUCKET_NAME"


      - name: Write Output to file
        run: | 
            terraform output > output.txt
            test -f output.txt && echo "output.txt exist" || echo "output.txt doesnt exist"
      
      - name: Save output.txt artifact
        uses: actions/upload-artifact@v4
        with:
          name: output.txt
          path: ./output.txt




      - name: Check and Update Repository Variable
        run: |
          VAR_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
          https://api.github.com/repos/Tonysysop/TaskManager/actions/variables/BUCKET_NAME)

          if [ "$VAR_EXISTS" -eq 200 ]; then
            echo "ðŸ”„ Variable exists, updating with PATCH..."
          curl -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
          https://api.github.com/repos/Tonysysop/TaskManager/actions/variables/BUCKET_NAME \
          -d '{"name": "BUCKET_NAME", "value": "'"$BUCKET_NAME"'"}'
          else
            echo "ðŸ†• Variable does not exist, creating with POST..."
          curl -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
          https://api.github.com/repos/Tonysysop/TaskManager/actions/variables \
          -d '{"name": "BUCKET_NAME", "value": "'"$BUCKET_NAME"'"}'
          fi



      # - name: Update Repository Variable in App repo
      #   run: |
      #       curl -X PATCH \
      #       -H "Accept: application/vnd.github+json" \
      #       -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
      #       https://api.github.com/repos/Tonysysop/TaskManager/actions/variables/BUCKET_NAME \
      #       -d '{"name": "BUCKET_NAME", "value": "'"$BUCKET_NAME"'"}'









      

      #Use this when you want to create the verrible in the app repo#
      # - name: Update Repository Variable in App repo
      #   run: |
      #     curl -X POST \
      #     -H "Accept: application/vnd.github+json" \
      #     -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
      #     https://api.github.com/repos/Tonysysop/TaskManager/actions/variables \
      #     -d '{"name": "BUCKET_NAME", "value": "'"$BUCKET_NAME"'"}'

